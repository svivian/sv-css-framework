/*-------------------------*\
|	GRID
\*-------------------------*/

/* Typical usage:
<div class="grid-wrapper"> <!-- add second class here for any custom styles e.g. borders -->
	<div class="colset">
		<div class="col span-8">
			<p>Content for the wider left column. Could be in an article tag instead of div.</p>
		</div>
		<div class="col span-4">
			<p>Content for the thinner right column e.g. a sidebar. Could be in an aside tag.</p>
		</div>
	</div>
	<div class="colset span-full">
		<p>Full width column here, avoids extra nested div.</p>
	</div>
</div>
*/


$grid-width-desktop: 1140px;
$grid-width-mob:      756px;
$grid-gutter:          20px;


.grid-wrapper {
	width: ($grid-width-desktop - $grid-gutter);
	margin-left: auto;
	margin-right: auto;
}

.colset, .col {
	@include box-sizing(border-box);
}

.colset {
	margin-left: (-$grid-gutter);
	margin-bottom: $grid-gutter;

	&:last-child {
		margin-bottom: 0;
	}

	&:after {
		content: "";
		display: table;
		clear: both;
	}
}

.col {
	float: left;
	padding-left: $grid-gutter;
}

/* TODO: calculate $spanmob from above */
$spanmob: 95px;
.span-1  { width: $spanmob; }
.span-2  { width: $spanmob*2; }
.span-3  { width: $spanmob*3; }
.span-4  { width: $spanmob*4; }
.span-5  { width: $spanmob*5; }
.span-6  { width: $spanmob*6; }
.span-7  { width: $spanmob*7; }
.span-8  { width: $spanmob*8; }
.span-9  { width: $spanmob*9; }
.span-10 { width: $spanmob*10; }
.span-11 { width: $spanmob*11; }
.span-12 { width: $spanmob*12; }


// .colset {
// 	width: 100%;
// 	max-width: $grid-width-desktop;
// 	margin: 0 auto;
// 	padding: 0 ($grid-gutter / 2);

// 	/* full-width column without need for extra elements */
// 	&.span-full {
// 		padding: 0 $grid-gutter;
// 		margin-bottom: $grid-gutter;

// 		>:last-child {
// 			margin-bottom: 0;
// 		}
// 	}

// 	&:after {
// 		content: "";
// 		display: table;
// 		clear: both;
// 	}
// }

/* bottom margin set on column for use on mobile */
// .col {
// 	float: left;
// 	margin-bottom: $grid-gutter;
// 	padding: 0 ($grid-gutter / 2);

// 	&.push-center {
// 		float: none;
// 		margin-left: auto;
// 		margin-right: auto;
// 	}

// 	>:last-child {
// 		margin-bottom: 0;
// 	}
// }

/* content pixel widths given for full size grid */
// .span-1  { width:   8.333%; } /*   62px    75px */
// .span-2  { width:  16.666%; } /*  144px   170px */
// .span-3  { width:  25%;     } /*  226px   265px */
// .span-4  { width:  33.333%; } /*  308px   360px */
// .span-5  { width:  41.666%; } /*  390px   455px */
// .span-6  { width:  50%;     } /*  472px   550px */
// .span-7  { width:  58.333%; } /*  554px   645px */
// .span-8  { width:  66.666%; } /*  636px   740px */
// .span-9  { width:  75%;     } /*  718px   835px */
// .span-10 { width:  83.333%; } /*  800px   930px */
// .span-11 { width:  91.666%; } /*  882px  1025px */
// .span-12 { width: 100%;     } /*  964px  1120px */


/*
	For responsive images we need to set `max-width` to keep them inside our grid, and we need auto
	 height to maintain the aspect ratio.
	However, auto height prevents the browser being able to allocate space for the image even with
	 their width and height explicitly defined in the HTML attributes and at full width.
	Therefore, we avoid setting `max-width` when the browser is above the grid's max width. The
	 exact pixel widths at full resolution are listed above.
*/
@media (max-width: $grid-width-desktop) {

	img, iframe {
		max-width: 100%;
		height: auto; /* maintain aspect ratio */
	}
}

@media (min-width: $grid-width-mob) and (max-width: ($grid-width-desktop - 1)) {

	.grid-wrapper {
		width: ($grid-width-mob - $grid-gutter);
	}

	.colset {
		padding: 0;

		&.span-full {
			padding: 0 ($grid-gutter / 2);
		}
	}

	/* TODO: calculate $spanmob from above */
	$spanmob: 63px;
	.span-1  { width: $spanmob; }
	.span-2  { width: $spanmob*2; }
	.span-3  { width: $spanmob*3; }
	.span-4  { width: $spanmob*4; }
	.span-5  { width: $spanmob*5; }
	.span-6  { width: $spanmob*6; }
	.span-7  { width: $spanmob*7; }
	.span-8  { width: $spanmob*8; }
	.span-9  { width: $spanmob*9; }
	.span-10 { width: $spanmob*10; }
	.span-11 { width: $spanmob*11; }
	.span-12 { width: $spanmob*12; }

}

/* TODO: check if `handheld` is necessary */
@media handheld, only screen and (max-width: ($grid-width-mob - 1)) {

	.colset, .grid-wrapper {
		max-width: none;
		min-width: auto;
	}
	.col {
		width: auto;
		float: none;
	}

	.colset.span-full, .col {
		overflow: auto;
	}
}





/* Sample media queries (to use in other files)
@media (min-width: $grid-width-mob) and (max-width: ($grid-width-desktop - 1)) {}
@media handheld, only screen and (max-width: ($grid-width-mob - 1)) {}
*/
